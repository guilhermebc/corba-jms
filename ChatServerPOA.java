
/**
* ChatServerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ChatIDL.idl
* Sunday, December 3, 2017 7:42:28 PM BRT
*/

public abstract class ChatServerPOA extends org.omg.PortableServer.Servant
 implements ChatServerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("_get_addClientID", new java.lang.Integer (0));
    _methods.put ("createRoom", new java.lang.Integer (1));
    _methods.put ("getRooms", new java.lang.Integer (2));
    _methods.put ("getNumberOfRooms", new java.lang.Integer (3));
    _methods.put ("setCurrentRoom", new java.lang.Integer (4));
    _methods.put ("enterRoom", new java.lang.Integer (5));
    _methods.put ("getNumberOfClientsInRoom", new java.lang.Integer (6));
    _methods.put ("leaveRoom", new java.lang.Integer (7));
    _methods.put ("registerClient", new java.lang.Integer (8));
    _methods.put ("authenticate", new java.lang.Integer (9));
    _methods.put ("previousMsg", new java.lang.Integer (10));
    _methods.put ("receiveMsg", new java.lang.Integer (11));
    _methods.put ("exit", new java.lang.Integer (12));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // ChatServer/_get_addClientID
       {
         int $result = (int)0;
         $result = this.addClientID ();
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 1:  // ChatServer/createRoom
       {
         try {
           Room newroom = RoomHelper.read (in);
           ChatRoom $result = null;
           $result = this.createRoom (newroom);
           out = $rh.createReply();
           ChatRoomHelper.write (out, $result);
         } catch (ChatServerPackage.LimitRoomsException $ex) {
           out = $rh.createExceptionReply ();
           ChatServerPackage.LimitRoomsExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // ChatServer/getRooms
       {
         ChatRoom $result[] = null;
         $result = this.getRooms ();
         out = $rh.createReply();
         RoomListHelper.write (out, $result);
         break;
       }

       case 3:  // ChatServer/getNumberOfRooms
       {
         long $result = (long)0;
         $result = this.getNumberOfRooms ();
         out = $rh.createReply();
         out.write_longlong ($result);
         break;
       }

       case 4:  // ChatServer/setCurrentRoom
       {
         long clientID = in.read_longlong ();
         String currentRoom = in.read_string ();
         this.setCurrentRoom (clientID, currentRoom);
         out = $rh.createReply();
         break;
       }

       case 5:  // ChatServer/enterRoom
       {
         String roomName = in.read_string ();
         long clientID = in.read_longlong ();
         this.enterRoom (roomName, clientID);
         out = $rh.createReply();
         break;
       }

       case 6:  // ChatServer/getNumberOfClientsInRoom
       {
         long clientID = in.read_longlong ();
         long $result = (long)0;
         $result = this.getNumberOfClientsInRoom (clientID);
         out = $rh.createReply();
         out.write_longlong ($result);
         break;
       }

       case 7:  // ChatServer/leaveRoom
       {
         long clientID = in.read_longlong ();
         this.leaveRoom (clientID);
         out = $rh.createReply();
         break;
       }

       case 8:  // ChatServer/registerClient
       {
         try {
           ChatClient newClient = ChatClientHelper.read (in);
           ChatClient $result = null;
           $result = this.registerClient (newClient);
           out = $rh.createReply();
           ChatClientHelper.write (out, $result);
         } catch (ChatServerPackage.LimitClientsException $ex) {
           out = $rh.createExceptionReply ();
           ChatServerPackage.LimitClientsExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 9:  // ChatServer/authenticate
       {
         String password = in.read_string ();
         boolean $result = false;
         $result = this.authenticate (password);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 10:  // ChatServer/previousMsg
       {
         long clientID = in.read_longlong ();
         this.previousMsg (clientID);
         out = $rh.createReply();
         break;
       }

       case 11:  // ChatServer/receiveMsg
       {
         String userName = in.read_string ();
         long clientId = in.read_longlong ();
         String msg = in.read_string ();
         this.receiveMsg (userName, clientId, msg);
         out = $rh.createReply();
         break;
       }

       case 12:  // ChatServer/exit
       {
         long clientID = in.read_longlong ();
         this.exit (clientID);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ChatServer:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public ChatServer _this() 
  {
    return ChatServerHelper.narrow(
    super._this_object());
  }

  public ChatServer _this(org.omg.CORBA.ORB orb) 
  {
    return ChatServerHelper.narrow(
    super._this_object(orb));
  }


} // class ChatServerPOA
